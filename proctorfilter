#!/usr/bin/env python
#
# Copyright 2007 Doug Hellmann.
#
#
#                         All Rights Reserved
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby
# granted, provided that the above copyright notice appear in all
# copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of Doug
# Hellmann not be used in advertising or publicity pertaining to
# distribution of the software without specific, written prior
# permission.
#
# DOUG HELLMANN DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
# NO EVENT SHALL DOUG HELLMANN BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

"""Filter proctorbatch --parsable output to show tests which did not pass.

"""

__module_id__ = "$Id: copyright.el 633 2007-05-27 14:15:19Z dhellmann $"

#
# Import system modules
#
import fileinput
import sys

#
# Import Local modules
#
import proctorlib
from proctorlib.result import ResultFactory, TestResult

#
# Module
#

class proctorfilter(proctorlib.CommandLineApp):
    """
    proctorfilter reads output created by proctorbatch with the
    --parsable option and prints a list of the tests which did not
    pass.
    """

    def appInit(self):
        self.desired_results = set()
        self.exit_with_status = False
        self.counts = { TestResult.OK    : 0,
                        TestResult.ERROR : 0,
                        TestResult.FAIL  : 0,
                        }
        return

    def optionHandler_exit_status(self):
        "Exit with a failure status if there were errors or test failures."
        self.exit_with_status = True
        return

    def optionHandler_ok(self):
        "Include tests which passed."
        self.desired_results.add(TestResult.OK)
        return

    def optionHandler_error(self):
        "Include tests which had an error."
        self.desired_results.add(TestResult.ERROR)
        return

    def optionHandler_fail(self):
        "Include tests which failed."
        self.desired_results.add(TestResult.FAIL)
        return

    summarize = False
    def optionHandler_summarize(self):
        "Print a summary with test counts."
        self.summarize = True
        return
    
    shortArgumentsDescription = "[<log file name> ...]"

    def showTestResult(self, test_result):
        if test_result.status in self.desired_results:
            self.statusMessage(test_result)
            # Do not repeat the name from the output
            test_output = '\n'.join(test_result.output.split('\n')[1:]) + '\n'
            self.statusMessage(test_output, 2)
        self.counts[test_result.status] = self.counts[test_result.status] + 1
        return

    def main(self, *args):
        if not self.desired_results:
            self.optionHandler_error()
            self.optionHandler_fail()

        parser = ResultFactory(self.showTestResult)

        for line in fileinput.input(args):
            parser.feed(line)

        if self.summarize:
            print '-------------------------'
            total = sum(self.counts.values())
            print ' Tests : %6d' % total
            for label, status in [ ('Pass', TestResult.OK), 
                                   ('Error', TestResult.ERROR),
                                   ('Fail', TestResult.FAIL),
                                   ]:
                num = self.counts[status]
                if num:
                    percent = (num * 100.0) / total
                    print ' %-5s : %6d  (%% %3d)' % (label, num, percent)
                else:
                    print ' %-5s : %6d' % (label, num)

        # Decide what our exit status is
        exit_code = 0
        if self.exit_with_status:
            if self.counts.get('Fail', 0):
                exit_code = 1
            elif self.counts.get('Error', 0):
                exit_code = 2
        return exit_code


if __name__ == '__main__':
    try:
        success = proctorfilter().run()
    except proctorfilter.HelpRequested:
        pass
    else:
        sys.exit( success )
